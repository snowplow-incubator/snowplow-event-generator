/*
 * Copyright (c) 2021-2022 Snowplow Analytics Ltd. All rights reserved.
 *
 * This program is licensed to you under the Apache License Version 2.0,
 * and you may not use this file except in compliance with the Apache License Version 2.0.
 * You may obtain a copy of the Apache License Version 2.0 at http://www.apache.org/licenses/LICENSE-2.0.
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the Apache License Version 2.0 is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the Apache License Version 2.0 for the specific language governing permissions and limitations there under.
 */
package com.snowplowanalytics.snowplow.eventgen.collector

import com.snowplowanalytics.snowplow.eventgen.primitives._
import org.scalacheck.Gen

import java.util.UUID
import java.time.Instant

/**
 * Information *derived* by the collector to be used as meta-data (meta-payload)
 * Everything else in [[CollectorPayload]] is directly payload (body and queryparams)
 *
 * @param timestamp  collector_tstamp
 * @param ipAddress  client's IP address, can be later overwritten by `ip` param in
 *                   `enrichments.Transform`
 * @param useragent  UA header, can be later overwritten by `ua` param in `entichments.Transform`
 * @param refererUri extracted from corresponding HTTP header
 * @param headers    all headers, including UA and referer URI
 * @param userId     generated by collector-set third-party cookie
 */
final case class CollectorContext(
                                   timestamp: Instant,
                                   ipAddress: Option[IpAddress],
                                   useragent: Option[String],
                                   refererUri: Option[Url],
                                   userId: Option[UUID],
                                   headers: Headers
                                 )
{
  override def toString: String =
    s"""
       ts: $timestamp
       ip: $ipAddress
       ua: $useragent
       ref: ${refererUri.toString}
       uid: $userId
       headers: ${headers.toList.mkString("\n")}
       """.stripMargin
}

object CollectorContext {
  def gen(now: Instant): Gen[CollectorContext] = for {
    ts <- genInstant(now)
    hdr <- Headers.gen
    ip <- IpAddress.genOpt
    uid <- Gen.some(Gen.uuid)
  } yield CollectorContext(ts, ip, hdr.ua, hdr.ref, uid, hdr)

}
